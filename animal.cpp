/********************************************************************
* Program Filename: animal.cpp
* Author: Megan Lynn Tuker
* Date: 02/16/2020
* Description: Generates information for the animal class
* Input: N/A
* Output: N/A
*********************************************************************/
 
#include<iostream>
#include<cstring>
#include"animal.h"

using namespace std;
 
/********************************************************************* 
* Function: Animal
* Description: Constructor
* Parameters: N/A
* Pre-Conditions: An animal object is constructed
* Post-Conditions: It is initialized to default
*********************************************************************/ 
Animal::Animal(){ //initialize everything to zero to check for errors
	species = "extinct";
	age = 0;
	price = 0;
	babies = 0;
	food = 0;
	revenue = 0;
}

/********************************************************************* 
* Function: Animal
* Description: Copy Constructor
* Parameters: Animal object
* Pre-Conditions: An animal object is to be copied; Animal a; Animal b = a;
* Post-Conditions: The animal object is coppied
*********************************************************************/ 
Animal::Animal(const Animal& old_animal){
	species = old_animal.species;
	age = old_animal.age;
	price = old_animal.price;
	babies = old_animal.babies;
	food = old_animal.food;
	revenue = old_animal.revenue;
}

/********************************************************************* 
* Function: operator=
* Description: Assignment Operator Overload
* Parameters: Animal object
* Pre-Conditions: An animal object is to be copied; Animal a; Animal b; b = a
* Post-Conditions: The animal object is coppied
*********************************************************************/ 
Animal& Animal::operator=(const Animal old_animal){
	species = old_animal.species;
	age = old_animal.age;
	price = old_animal.price;
	babies = old_animal.babies;
	food = old_animal.food;
	revenue = old_animal.revenue;
	return *this;
}

/********************************************************************* 
* Function: getSpecies
* Description: Accessor (mutator)
* Parameters: N/A
* Pre-Conditions: An animal object exists
* Post-Conditions: The species name is returned
*********************************************************************/ 
string Animal::getSpecies(){
	return species;
}

/********************************************************************* 
* Function: getAge
* Description: Accessor (mutator)
* Parameters: N/A
* Pre-Conditions: An animal object exists
* Post-Conditions: The animal age is returned
*********************************************************************/ 
int Animal::getAge(){
	return age;
}

/********************************************************************* 
* Function: getPrice
* Description: Accessor (mutator)
* Parameters: N/A
* Pre-Conditions: An animal object exists
* Post-Conditions: The purchasing price of the animal is returned
*********************************************************************/ 
int Animal::getPrice(){
	return price;
}

/********************************************************************* 
* Function: getBabies
* Description: Accessor (mutator)
* Parameters: N/A
* Pre-Conditions: An animal object exists
* Post-Conditions: The number of babies birthed by a particular species is returned
*********************************************************************/ 
int Animal::getBabies(){
	return babies;
}

/********************************************************************* 
* Function: getFood
* Description: Accessor (mutator)
* Parameters: N/A
* Pre-Conditions: An animal object exists
* Post-Conditions: The modifier for the base food price for that species is returned
*********************************************************************/ 
int Animal::getFood(){
	return food;
}

/********************************************************************* 
* Function: getRevenue
* Description: Accessor (mutator)
* Parameters: N/A
* Pre-Conditions: An animal object exists
* Post-Conditions: The revenue generated by a particular species is returned
*********************************************************************/ 
int Animal::getRevenue(){
	return revenue;
}

/********************************************************************* 
* Function: setSpecies
* Description: Mutator (setter)
* Parameters: new species value
* Pre-Conditions: An animal object exists
* Post-Conditions: Reset the value of species to input
*********************************************************************/ 
void Animal::setSpecies(string new_species){
	species = new_species;
}

/********************************************************************* 
* Function: setAge
* Description: Mutator (setter)
* Parameters: new age value
* Pre-Conditions: An animal object exists
* Post-Conditions: Reset the value of age to input
*********************************************************************/ 
void Animal::setAge(int new_age){
	age = new_age;
}

/********************************************************************* 
* Function: setPrice
* Description: Mutator (setter)
* Parameters: new price value
* Pre-Conditions: An animal object exists
* Post-Conditions: Reset the value of price to input
*********************************************************************/ 
void Animal::setPrice(int new_price){
	price = new_price;
}

/********************************************************************* 
* Function: setBabies
* Description: Mutator (setter)
* Parameters: new baby value
* Pre-Conditions: An animal object exists
* Post-Conditions: Reset the value of babies to input
*********************************************************************/ 
void Animal::setBabies(int new_babies){
	babies = new_babies;
}

/********************************************************************* 
* Function: setFood
* Description: Mutator (setter)
* Parameters: new food value
* Pre-Conditions: An animal object exists
* Post-Conditions: Reset the value of food to input
*********************************************************************/ 
void Animal::setFood(int new_food){
	food = new_food;
}

/********************************************************************* 
* Function: setRevenue
* Description: Mutator (setter)
* Parameters: new revenue value
* Pre-Conditions: An animal object exists
* Post-Conditions: Reset the value of revenue to input
*********************************************************************/ 
void Animal::setRevenue(int new_revenue){
	revenue = new_revenue;
}

/********************************************************************* 
* Function: increaseAge
* Description: Increase the age of an animal by 1 month
* Parameters: N/A
* Pre-Conditions: The animal needs to age
* Post-Conditions: Age is increased by 1
*********************************************************************/ 
void Animal::increaseAge(){
	age = age + 1; //increases age by 1 month
}

/********************************************************************* 
* Function: Animal
* Description: Destructor
* Parameters: N/A
* Pre-Conditions: An animal object falls out of scope
* Post-Conditions: It is destroyed
*********************************************************************/ 
Animal::~Animal(){ }
